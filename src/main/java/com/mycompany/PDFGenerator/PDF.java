package com.mycompany.PDFGenerator;

import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Cell;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import com.itextpdf.layout.property.TextAlignment;


import java.io.*;
import java.util.*;


public abstract class PDF {
    public Document document;

    public void createDocument(String str) throws FileNotFoundException {
        File file = new File(str);
        file.mkdirs();
        long date = new Date().getTime();
        FileOutputStream fos = new FileOutputStream(str + "/" + getPdfFileName() + date + ".pdf");
        PdfWriter pdfWriter = new PdfWriter(fos);

        PdfDocument pdf = new PdfDocument(pdfWriter);

        this.document = new Document(pdf);
    }

    protected void addTitle(String title){
        this.document.add(new Paragraph(title).setTextAlignment(TextAlignment.CENTER).setBold().setFontSize(17));
    }

    protected void addGeneratedBy(String user) {
        this.document.add(new Paragraph("Generated by: " + user).setTextAlignment(TextAlignment.RIGHT).setItalic().setFontSize(9));
    }

    protected void addDateTime(Date date){
        this.document.add(new Paragraph("Generated by: " + date).setTextAlignment(TextAlignment.RIGHT).setItalic().setFontSize(9));
    }

    protected void addTableAsMap(List<Map<String, String>> rows){
        this.addTable(rows, createWidths(rows.get(0).keySet().size()), getColumnNames(rows.get(0)));
    }

    protected void addTable(List<? extends Mappable> rows) {
        List<Map<String, String>> mappedRows = new ArrayList<>();

        for (Mappable row : rows){
            mappedRows.add(row.toMap());
        }

        this.addTable(mappedRows, createWidths(mappedRows.get(0).keySet().size()), getColumnNames(mappedRows.get(0)));
    }

    private float[] createWidths(int size){
        float[] sizes = new float[size];

        for(int i = 0; i < size; i++){
            sizes[i] = 500 / size;
        }
        return sizes;
    }

    private Set<String> getColumnNames(Map<String, String> entry) { return entry.keySet(); }

    protected void addTable(List<Map<String, String>> rows, float[] rowsize, Set<String> colNames){
        Table table = new Table(rowsize);

        for (String colName : colNames){
            table.addCell(new Cell().add(new Paragraph(colName)));
        }

        for (Map<String, String> row : rows){
            for (String colName : colNames){
                table.addCell(new Cell().add(new Paragraph(row.get(colName))));
            }
        }

        this.document.add(table);
    }
    
   public static File[] getExistingPdfs(String str) throws IOException {
        File dir = new File(str);
        dir.mkdirs();
        
        return dir.listFiles(((dir1, name) -> {
            String low = name.toLowerCase();
            return low.endsWith(".pdf");
        }));
   }

   protected void closeDocument() { this.document.close(); }

    public abstract void createPdf(String generatedBy) throws FileNotFoundException;

    public String getPdfFileName() {
        return "untilted_report_";
    }

    public String getPdfName() {return "Untilted report"; }

    @Override
    public String toString() {
        return getPdfName();
    }
}
